
stm32-flight-altimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000188c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001a18  08001a18  00011a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a58  08001a58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a58  08001a58  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a58  08001a58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a58  08001a58  00011a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a5c  08001a5c  00011a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08001a6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001a6c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000755a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001291  00000000  00000000  00027596  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000758  00000000  00000000  00028828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b0  00000000  00000000  00028f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000183d0  00000000  00000000  00029630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005dd3  00000000  00000000  00041a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098fce  00000000  00000000  000477d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e07a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c6c  00000000  00000000  000e081c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001a00 	.word	0x08001a00

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08001a00 	.word	0x08001a00

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 f9cb 	bl	800056a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f81a 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f89a 	bl	8000310 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001dc:	f000 f85a 	bl	8000294 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // chip select high, disable spi device
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ea:	f000 fc8b 	bl	8000b04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); // chip select high, disable spi device
 80001ee:	2201      	movs	r2, #1
 80001f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f8:	f000 fc84 	bl	8000b04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // chip select high, disable spi device
 80001fc:	2201      	movs	r2, #1
 80001fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000206:	f000 fc7d 	bl	8000b04 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020a:	e7fe      	b.n	800020a <main+0x3e>

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b096      	sub	sp, #88	; 0x58
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0314 	add.w	r3, r7, #20
 8000216:	2244      	movs	r2, #68	; 0x44
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f001 fbe8 	bl	80019f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	463b      	mov	r3, r7
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800022e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000232:	f000 fc8d 	bl	8000b50 <HAL_PWREx_ControlVoltageScaling>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800023c:	f000 f89a 	bl	8000374 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000240:	2301      	movs	r3, #1
 8000242:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000244:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800024a:	2300      	movs	r3, #0
 800024c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024e:	f107 0314 	add.w	r3, r7, #20
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fcd2 	bl	8000bfc <HAL_RCC_OscConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800025e:	f000 f889 	bl	8000374 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000262:	230f      	movs	r3, #15
 8000264:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000266:	2302      	movs	r3, #2
 8000268:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000276:	463b      	mov	r3, r7
 8000278:	2101      	movs	r1, #1
 800027a:	4618      	mov	r0, r3
 800027c:	f001 f924 	bl	80014c8 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000286:	f000 f875 	bl	8000374 <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3758      	adds	r7, #88	; 0x58
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000298:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <MX_SPI1_Init+0x74>)
 800029a:	4a1c      	ldr	r2, [pc, #112]	; (800030c <MX_SPI1_Init+0x78>)
 800029c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800029e:	4b1a      	ldr	r3, [pc, #104]	; (8000308 <MX_SPI1_Init+0x74>)
 80002a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002a6:	4b18      	ldr	r3, [pc, #96]	; (8000308 <MX_SPI1_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80002ac:	4b16      	ldr	r3, [pc, #88]	; (8000308 <MX_SPI1_Init+0x74>)
 80002ae:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002b4:	4b14      	ldr	r3, [pc, #80]	; (8000308 <MX_SPI1_Init+0x74>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002ba:	4b13      	ldr	r3, [pc, #76]	; (8000308 <MX_SPI1_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_SPI1_Init+0x74>)
 80002c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <MX_SPI1_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_SPI1_Init+0x74>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_SPI1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <MX_SPI1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_SPI1_Init+0x74>)
 80002e2:	2207      	movs	r2, #7
 80002e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <MX_SPI1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_SPI1_Init+0x74>)
 80002ee:	2208      	movs	r2, #8
 80002f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <MX_SPI1_Init+0x74>)
 80002f4:	f001 fab4 	bl	8001860 <HAL_SPI_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80002fe:	f000 f839 	bl	8000374 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000028 	.word	0x20000028
 800030c:	40013000 	.word	0x40013000

08000310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <MX_GPIO_Init+0x60>)
 8000326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000328:	4a11      	ldr	r2, [pc, #68]	; (8000370 <MX_GPIO_Init+0x60>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <MX_GPIO_Init+0x60>)
 8000332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000334:	f003 0301 	and.w	r3, r3, #1
 8000338:	603b      	str	r3, [r7, #0]
 800033a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	f641 4110 	movw	r1, #7184	; 0x1c10
 8000342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000346:	f000 fbdd 	bl	8000b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800034a:	f641 4310 	movw	r3, #7184	; 0x1c10
 800034e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000350:	2301      	movs	r3, #1
 8000352:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000358:	2300      	movs	r3, #0
 800035a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	4619      	mov	r1, r3
 8000360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000364:	f000 fa5c 	bl	8000820 <HAL_GPIO_Init>

}
 8000368:	bf00      	nop
 800036a:	3718      	adds	r7, #24
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40021000 	.word	0x40021000

08000374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
	...

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <HAL_MspInit+0x44>)
 800038c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800038e:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <HAL_MspInit+0x44>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6613      	str	r3, [r2, #96]	; 0x60
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <HAL_MspInit+0x44>)
 8000398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <HAL_MspInit+0x44>)
 80003a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003a6:	4a08      	ldr	r2, [pc, #32]	; (80003c8 <HAL_MspInit+0x44>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ac:	6593      	str	r3, [r2, #88]	; 0x58
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <HAL_MspInit+0x44>)
 80003b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000

080003cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08a      	sub	sp, #40	; 0x28
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a17      	ldr	r2, [pc, #92]	; (8000448 <HAL_SPI_MspInit+0x7c>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d128      	bne.n	8000440 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <HAL_SPI_MspInit+0x80>)
 80003f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003f2:	4a16      	ldr	r2, [pc, #88]	; (800044c <HAL_SPI_MspInit+0x80>)
 80003f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003f8:	6613      	str	r3, [r2, #96]	; 0x60
 80003fa:	4b14      	ldr	r3, [pc, #80]	; (800044c <HAL_SPI_MspInit+0x80>)
 80003fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000402:	613b      	str	r3, [r7, #16]
 8000404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000406:	4b11      	ldr	r3, [pc, #68]	; (800044c <HAL_SPI_MspInit+0x80>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040a:	4a10      	ldr	r2, [pc, #64]	; (800044c <HAL_SPI_MspInit+0x80>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <HAL_SPI_MspInit+0x80>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800041e:	23c2      	movs	r3, #194	; 0xc2
 8000420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000422:	2302      	movs	r3, #2
 8000424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800042a:	2303      	movs	r3, #3
 800042c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800042e:	2305      	movs	r3, #5
 8000430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	4619      	mov	r1, r3
 8000438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043c:	f000 f9f0 	bl	8000820 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000440:	bf00      	nop
 8000442:	3728      	adds	r7, #40	; 0x28
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40013000 	.word	0x40013000
 800044c:	40021000 	.word	0x40021000

08000450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000462:	e7fe      	b.n	8000462 <HardFault_Handler+0x4>

08000464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <MemManage_Handler+0x4>

0800046a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046e:	e7fe      	b.n	800046e <BusFault_Handler+0x4>

08000470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <UsageFault_Handler+0x4>

08000476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a4:	f000 f8b6 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}

080004ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004b0:	4b17      	ldr	r3, [pc, #92]	; (8000510 <SystemInit+0x64>)
 80004b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004b6:	4a16      	ldr	r2, [pc, #88]	; (8000510 <SystemInit+0x64>)
 80004b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80004c0:	4b14      	ldr	r3, [pc, #80]	; (8000514 <SystemInit+0x68>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a13      	ldr	r2, [pc, #76]	; (8000514 <SystemInit+0x68>)
 80004c6:	f043 0301 	orr.w	r3, r3, #1
 80004ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <SystemInit+0x68>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80004d2:	4b10      	ldr	r3, [pc, #64]	; (8000514 <SystemInit+0x68>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a0f      	ldr	r2, [pc, #60]	; (8000514 <SystemInit+0x68>)
 80004d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80004dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80004e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <SystemInit+0x68>)
 80004e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <SystemInit+0x68>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a09      	ldr	r2, [pc, #36]	; (8000514 <SystemInit+0x68>)
 80004f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <SystemInit+0x68>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <SystemInit+0x64>)
 80004fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000502:	609a      	str	r2, [r3, #8]
#endif
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	e000ed00 	.word	0xe000ed00
 8000514:	40021000 	.word	0x40021000

08000518 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000550 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800051c:	f7ff ffc6 	bl	80004ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000520:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000522:	e003      	b.n	800052c <LoopCopyDataInit>

08000524 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000526:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000528:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800052a:	3104      	adds	r1, #4

0800052c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800052c:	480a      	ldr	r0, [pc, #40]	; (8000558 <LoopForever+0xa>)
	ldr	r3, =_edata
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000530:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000532:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000534:	d3f6      	bcc.n	8000524 <CopyDataInit>
	ldr	r2, =_sbss
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000538:	e002      	b.n	8000540 <LoopFillZerobss>

0800053a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800053a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800053c:	f842 3b04 	str.w	r3, [r2], #4

08000540 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <LoopForever+0x16>)
	cmp	r2, r3
 8000542:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000544:	d3f9      	bcc.n	800053a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000546:	f001 fa2f 	bl	80019a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800054a:	f7ff fe3f 	bl	80001cc <main>

0800054e <LoopForever>:

LoopForever:
    b LoopForever
 800054e:	e7fe      	b.n	800054e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000550:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000554:	08001a60 	.word	0x08001a60
	ldr	r0, =_sdata
 8000558:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800055c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000560:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000564:	20000090 	.word	0x20000090

08000568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC1_2_IRQHandler>

0800056a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000570:	2300      	movs	r3, #0
 8000572:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000574:	2003      	movs	r0, #3
 8000576:	f000 f91f 	bl	80007b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800057a:	2000      	movs	r0, #0
 800057c:	f000 f80e 	bl	800059c <HAL_InitTick>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d002      	beq.n	800058c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	71fb      	strb	r3, [r7, #7]
 800058a:	e001      	b.n	8000590 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800058c:	f7ff fefa 	bl	8000384 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000590:	79fb      	ldrb	r3, [r7, #7]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005a4:	2300      	movs	r3, #0
 80005a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <HAL_InitTick+0x6c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d023      	beq.n	80005f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <HAL_InitTick+0x70>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <HAL_InitTick+0x6c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005be:	fbb3 f3f1 	udiv	r3, r3, r1
 80005c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f91d 	bl	8000806 <HAL_SYSTICK_Config>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d10f      	bne.n	80005f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b0f      	cmp	r3, #15
 80005d6:	d809      	bhi.n	80005ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d8:	2200      	movs	r2, #0
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	f04f 30ff 	mov.w	r0, #4294967295
 80005e0:	f000 f8f5 	bl	80007ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005e4:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <HAL_InitTick+0x74>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6013      	str	r3, [r2, #0]
 80005ea:	e007      	b.n	80005fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005ec:	2301      	movs	r3, #1
 80005ee:	73fb      	strb	r3, [r7, #15]
 80005f0:	e004      	b.n	80005fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	73fb      	strb	r3, [r7, #15]
 80005f6:	e001      	b.n	80005fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005f8:	2301      	movs	r3, #1
 80005fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000008 	.word	0x20000008
 800060c:	20000000 	.word	0x20000000
 8000610:	20000004 	.word	0x20000004

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x20>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x24>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_IncTick+0x24>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000008 	.word	0x20000008
 8000638:	2000008c 	.word	0x2000008c

0800063c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return uwTick;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_GetTick+0x14>)
 8000642:	681b      	ldr	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	2000008c 	.word	0x2000008c

08000654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <__NVIC_SetPriorityGrouping+0x44>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000670:	4013      	ands	r3, r2
 8000672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800067c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000686:	4a04      	ldr	r2, [pc, #16]	; (8000698 <__NVIC_SetPriorityGrouping+0x44>)
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	60d3      	str	r3, [r2, #12]
}
 800068c:	bf00      	nop
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <__NVIC_GetPriorityGrouping+0x18>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	f003 0307 	and.w	r3, r3, #7
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db0a      	blt.n	80006e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	490c      	ldr	r1, [pc, #48]	; (8000704 <__NVIC_SetPriority+0x4c>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e0:	e00a      	b.n	80006f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4908      	ldr	r1, [pc, #32]	; (8000708 <__NVIC_SetPriority+0x50>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	3b04      	subs	r3, #4
 80006f0:	0112      	lsls	r2, r2, #4
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	440b      	add	r3, r1
 80006f6:	761a      	strb	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000e100 	.word	0xe000e100
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070c:	b480      	push	{r7}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	f1c3 0307 	rsb	r3, r3, #7
 8000726:	2b04      	cmp	r3, #4
 8000728:	bf28      	it	cs
 800072a:	2304      	movcs	r3, #4
 800072c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3304      	adds	r3, #4
 8000732:	2b06      	cmp	r3, #6
 8000734:	d902      	bls.n	800073c <NVIC_EncodePriority+0x30>
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3b03      	subs	r3, #3
 800073a:	e000      	b.n	800073e <NVIC_EncodePriority+0x32>
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	f04f 32ff 	mov.w	r2, #4294967295
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	43da      	mvns	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	401a      	ands	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000754:	f04f 31ff 	mov.w	r1, #4294967295
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43d9      	mvns	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
         );
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000784:	d301      	bcc.n	800078a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000786:	2301      	movs	r3, #1
 8000788:	e00f      	b.n	80007aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <SysTick_Config+0x40>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000792:	210f      	movs	r1, #15
 8000794:	f04f 30ff 	mov.w	r0, #4294967295
 8000798:	f7ff ff8e 	bl	80006b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <SysTick_Config+0x40>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SysTick_Config+0x40>)
 80007a4:	2207      	movs	r2, #7
 80007a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	e000e010 	.word	0xe000e010

080007b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff47 	bl	8000654 <__NVIC_SetPriorityGrouping>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007e0:	f7ff ff5c 	bl	800069c <__NVIC_GetPriorityGrouping>
 80007e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6978      	ldr	r0, [r7, #20]
 80007ec:	f7ff ff8e 	bl	800070c <NVIC_EncodePriority>
 80007f0:	4602      	mov	r2, r0
 80007f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff5d 	bl	80006b8 <__NVIC_SetPriority>
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ffb0 	bl	8000774 <SysTick_Config>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000820:	b480      	push	{r7}
 8000822:	b087      	sub	sp, #28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082e:	e14e      	b.n	8000ace <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	2101      	movs	r1, #1
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	fa01 f303 	lsl.w	r3, r1, r3
 800083c:	4013      	ands	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	f000 8140 	beq.w	8000ac8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d00b      	beq.n	8000868 <HAL_GPIO_Init+0x48>
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b02      	cmp	r3, #2
 8000856:	d007      	beq.n	8000868 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085c:	2b11      	cmp	r3, #17
 800085e:	d003      	beq.n	8000868 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	2b12      	cmp	r3, #18
 8000866:	d130      	bne.n	80008ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	2203      	movs	r2, #3
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	43db      	mvns	r3, r3
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	4013      	ands	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	4313      	orrs	r3, r2
 8000890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800089e:	2201      	movs	r2, #1
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43db      	mvns	r3, r3
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4013      	ands	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	091b      	lsrs	r3, r3, #4
 80008b4:	f003 0201 	and.w	r2, r3, #1
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	2203      	movs	r2, #3
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4013      	ands	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d003      	beq.n	800090a <HAL_GPIO_Init+0xea>
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	2b12      	cmp	r3, #18
 8000908:	d123      	bne.n	8000952 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	08da      	lsrs	r2, r3, #3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3208      	adds	r2, #8
 8000912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000916:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	220f      	movs	r2, #15
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4013      	ands	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	691a      	ldr	r2, [r3, #16]
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	f003 0307 	and.w	r3, r3, #7
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4313      	orrs	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	08da      	lsrs	r2, r3, #3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3208      	adds	r2, #8
 800094c:	6939      	ldr	r1, [r7, #16]
 800094e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	2203      	movs	r2, #3
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4013      	ands	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f003 0203 	and.w	r2, r3, #3
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	2b00      	cmp	r3, #0
 8000990:	f000 809a 	beq.w	8000ac8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000994:	4b55      	ldr	r3, [pc, #340]	; (8000aec <HAL_GPIO_Init+0x2cc>)
 8000996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000998:	4a54      	ldr	r2, [pc, #336]	; (8000aec <HAL_GPIO_Init+0x2cc>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	6613      	str	r3, [r2, #96]	; 0x60
 80009a0:	4b52      	ldr	r3, [pc, #328]	; (8000aec <HAL_GPIO_Init+0x2cc>)
 80009a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009ac:	4a50      	ldr	r2, [pc, #320]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	089b      	lsrs	r3, r3, #2
 80009b2:	3302      	adds	r3, #2
 80009b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	f003 0303 	and.w	r3, r3, #3
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	220f      	movs	r2, #15
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4013      	ands	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009d6:	d013      	beq.n	8000a00 <HAL_GPIO_Init+0x1e0>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a46      	ldr	r2, [pc, #280]	; (8000af4 <HAL_GPIO_Init+0x2d4>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d00d      	beq.n	80009fc <HAL_GPIO_Init+0x1dc>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a45      	ldr	r2, [pc, #276]	; (8000af8 <HAL_GPIO_Init+0x2d8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d007      	beq.n	80009f8 <HAL_GPIO_Init+0x1d8>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a44      	ldr	r2, [pc, #272]	; (8000afc <HAL_GPIO_Init+0x2dc>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d101      	bne.n	80009f4 <HAL_GPIO_Init+0x1d4>
 80009f0:	2303      	movs	r3, #3
 80009f2:	e006      	b.n	8000a02 <HAL_GPIO_Init+0x1e2>
 80009f4:	2307      	movs	r3, #7
 80009f6:	e004      	b.n	8000a02 <HAL_GPIO_Init+0x1e2>
 80009f8:	2302      	movs	r3, #2
 80009fa:	e002      	b.n	8000a02 <HAL_GPIO_Init+0x1e2>
 80009fc:	2301      	movs	r3, #1
 80009fe:	e000      	b.n	8000a02 <HAL_GPIO_Init+0x1e2>
 8000a00:	2300      	movs	r3, #0
 8000a02:	697a      	ldr	r2, [r7, #20]
 8000a04:	f002 0203 	and.w	r2, r2, #3
 8000a08:	0092      	lsls	r2, r2, #2
 8000a0a:	4093      	lsls	r3, r2
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a12:	4937      	ldr	r1, [pc, #220]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	089b      	lsrs	r3, r3, #2
 8000a18:	3302      	adds	r3, #2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a20:	4b37      	ldr	r3, [pc, #220]	; (8000b00 <HAL_GPIO_Init+0x2e0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d003      	beq.n	8000a44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a44:	4a2e      	ldr	r2, [pc, #184]	; (8000b00 <HAL_GPIO_Init+0x2e0>)
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <HAL_GPIO_Init+0x2e0>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a6e:	4a24      	ldr	r2, [pc, #144]	; (8000b00 <HAL_GPIO_Init+0x2e0>)
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a74:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <HAL_GPIO_Init+0x2e0>)
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a98:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <HAL_GPIO_Init+0x2e0>)
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_GPIO_Init+0x2e0>)
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <HAL_GPIO_Init+0x2e0>)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	3301      	adds	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	f47f aea9 	bne.w	8000830 <HAL_GPIO_Init+0x10>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	371c      	adds	r7, #28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010000 	.word	0x40010000
 8000af4:	48000400 	.word	0x48000400
 8000af8:	48000800 	.word	0x48000800
 8000afc:	48000c00 	.word	0x48000c00
 8000b00:	40010400 	.word	0x40010400

08000b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]
 8000b10:	4613      	mov	r3, r2
 8000b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b14:	787b      	ldrb	r3, [r7, #1]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b1a:	887a      	ldrh	r2, [r7, #2]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b20:	e002      	b.n	8000b28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b22:	887a      	ldrh	r2, [r7, #2]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <HAL_PWREx_GetVoltageRange+0x18>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40007000 	.word	0x40007000

08000b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b5e:	d130      	bne.n	8000bc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b60:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b6c:	d038      	beq.n	8000be0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b76:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2232      	movs	r2, #50	; 0x32
 8000b84:	fb02 f303 	mul.w	r3, r2, r3
 8000b88:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	0c9b      	lsrs	r3, r3, #18
 8000b90:	3301      	adds	r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b94:	e002      	b.n	8000b9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ba8:	d102      	bne.n	8000bb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1f2      	bne.n	8000b96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bbc:	d110      	bne.n	8000be0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	e00f      	b.n	8000be2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bce:	d007      	beq.n	8000be0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bd8:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40007000 	.word	0x40007000
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	431bde83 	.word	0x431bde83

08000bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d102      	bne.n	8000c10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	f000 bc56 	b.w	80014bc <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c10:	4ba1      	ldr	r3, [pc, #644]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	f003 030c 	and.w	r3, r3, #12
 8000c18:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c1a:	4b9f      	ldr	r3, [pc, #636]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
 8000c22:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 0310 	and.w	r3, r3, #16
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f000 80e6 	beq.w	8000dfe <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c32:	6a3b      	ldr	r3, [r7, #32]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d007      	beq.n	8000c48 <HAL_RCC_OscConfig+0x4c>
 8000c38:	6a3b      	ldr	r3, [r7, #32]
 8000c3a:	2b0c      	cmp	r3, #12
 8000c3c:	f040 808d 	bne.w	8000d5a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	f040 8089 	bne.w	8000d5a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c48:	4b93      	ldr	r3, [pc, #588]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d006      	beq.n	8000c62 <HAL_RCC_OscConfig+0x66>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	f000 bc2d 	b.w	80014bc <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c66:	4b8c      	ldr	r3, [pc, #560]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0308 	and.w	r3, r3, #8
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d004      	beq.n	8000c7c <HAL_RCC_OscConfig+0x80>
 8000c72:	4b89      	ldr	r3, [pc, #548]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c7a:	e005      	b.n	8000c88 <HAL_RCC_OscConfig+0x8c>
 8000c7c:	4b86      	ldr	r3, [pc, #536]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d224      	bcs.n	8000cd6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fd85 	bl	80017a0 <RCC_SetFlashLatencyFromMSIRange>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d002      	beq.n	8000ca2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f000 bc0d 	b.w	80014bc <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ca2:	4b7d      	ldr	r3, [pc, #500]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a7c      	ldr	r2, [pc, #496]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	4b7a      	ldr	r3, [pc, #488]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	4977      	ldr	r1, [pc, #476]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cc0:	4b75      	ldr	r3, [pc, #468]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a1b      	ldr	r3, [r3, #32]
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	4972      	ldr	r1, [pc, #456]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	604b      	str	r3, [r1, #4]
 8000cd4:	e025      	b.n	8000d22 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cd6:	4b70      	ldr	r3, [pc, #448]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a6f      	ldr	r2, [pc, #444]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	4b6d      	ldr	r3, [pc, #436]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cee:	496a      	ldr	r1, [pc, #424]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cf4:	4b68      	ldr	r3, [pc, #416]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a1b      	ldr	r3, [r3, #32]
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	4965      	ldr	r1, [pc, #404]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000d04:	4313      	orrs	r3, r2
 8000d06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d08:	6a3b      	ldr	r3, [r7, #32]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d109      	bne.n	8000d22 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fd44 	bl	80017a0 <RCC_SetFlashLatencyFromMSIRange>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e3cc      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d22:	f000 fcb3 	bl	800168c <HAL_RCC_GetSysClockFreq>
 8000d26:	4601      	mov	r1, r0
 8000d28:	4b5b      	ldr	r3, [pc, #364]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	091b      	lsrs	r3, r3, #4
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	4a5a      	ldr	r2, [pc, #360]	; (8000e9c <HAL_RCC_OscConfig+0x2a0>)
 8000d34:	5cd3      	ldrb	r3, [r2, r3]
 8000d36:	f003 031f 	and.w	r3, r3, #31
 8000d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3e:	4a58      	ldr	r2, [pc, #352]	; (8000ea0 <HAL_RCC_OscConfig+0x2a4>)
 8000d40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d42:	4b58      	ldr	r3, [pc, #352]	; (8000ea4 <HAL_RCC_OscConfig+0x2a8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fc28 	bl	800059c <HAL_InitTick>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8000d50:	7dfb      	ldrb	r3, [r7, #23]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d052      	beq.n	8000dfc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8000d56:	7dfb      	ldrb	r3, [r7, #23]
 8000d58:	e3b0      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d032      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d62:	4b4d      	ldr	r3, [pc, #308]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a4c      	ldr	r2, [pc, #304]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d6e:	f7ff fc65 	bl	800063c <HAL_GetTick>
 8000d72:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d74:	e008      	b.n	8000d88 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d76:	f7ff fc61 	bl	800063c <HAL_GetTick>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d901      	bls.n	8000d88 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e399      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d88:	4b43      	ldr	r3, [pc, #268]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0f0      	beq.n	8000d76 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d94:	4b40      	ldr	r3, [pc, #256]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a3f      	ldr	r2, [pc, #252]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	4b3d      	ldr	r3, [pc, #244]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	493a      	ldr	r1, [pc, #232]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000dae:	4313      	orrs	r3, r2
 8000db0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000db2:	4b39      	ldr	r3, [pc, #228]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a1b      	ldr	r3, [r3, #32]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	4935      	ldr	r1, [pc, #212]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	604b      	str	r3, [r1, #4]
 8000dc6:	e01a      	b.n	8000dfe <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000dc8:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a32      	ldr	r2, [pc, #200]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000dce:	f023 0301 	bic.w	r3, r3, #1
 8000dd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fc32 	bl	800063c <HAL_GetTick>
 8000dd8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ddc:	f7ff fc2e 	bl	800063c <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e366      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f0      	bne.n	8000ddc <HAL_RCC_OscConfig+0x1e0>
 8000dfa:	e000      	b.n	8000dfe <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000dfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d073      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	d005      	beq.n	8000e1c <HAL_RCC_OscConfig+0x220>
 8000e10:	6a3b      	ldr	r3, [r7, #32]
 8000e12:	2b0c      	cmp	r3, #12
 8000e14:	d10e      	bne.n	8000e34 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d10b      	bne.n	8000e34 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d063      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x2f4>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d15f      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e343      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e3c:	d106      	bne.n	8000e4c <HAL_RCC_OscConfig+0x250>
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a15      	ldr	r2, [pc, #84]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e01d      	b.n	8000e88 <HAL_RCC_OscConfig+0x28c>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e54:	d10c      	bne.n	8000e70 <HAL_RCC_OscConfig+0x274>
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a0f      	ldr	r2, [pc, #60]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e00b      	b.n	8000e88 <HAL_RCC_OscConfig+0x28c>
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <HAL_RCC_OscConfig+0x29c>)
 8000e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d01b      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e90:	f7ff fbd4 	bl	800063c <HAL_GetTick>
 8000e94:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e96:	e010      	b.n	8000eba <HAL_RCC_OscConfig+0x2be>
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	08001a18 	.word	0x08001a18
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea8:	f7ff fbc8 	bl	800063c <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b64      	cmp	r3, #100	; 0x64
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e300      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eba:	4ba0      	ldr	r3, [pc, #640]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f0      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x2ac>
 8000ec6:	e014      	b.n	8000ef2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fbb8 	bl	800063c <HAL_GetTick>
 8000ecc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed0:	f7ff fbb4 	bl	800063c <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b64      	cmp	r3, #100	; 0x64
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e2ec      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ee2:	4b96      	ldr	r3, [pc, #600]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f0      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x2d4>
 8000eee:	e000      	b.n	8000ef2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d060      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000efe:	6a3b      	ldr	r3, [r7, #32]
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d005      	beq.n	8000f10 <HAL_RCC_OscConfig+0x314>
 8000f04:	6a3b      	ldr	r3, [r7, #32]
 8000f06:	2b0c      	cmp	r3, #12
 8000f08:	d119      	bne.n	8000f3e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d116      	bne.n	8000f3e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f10:	4b8a      	ldr	r3, [pc, #552]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <HAL_RCC_OscConfig+0x32c>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e2c9      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f28:	4b84      	ldr	r3, [pc, #528]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	061b      	lsls	r3, r3, #24
 8000f36:	4981      	ldr	r1, [pc, #516]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f3c:	e040      	b.n	8000fc0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d023      	beq.n	8000f8e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f46:	4b7d      	ldr	r3, [pc, #500]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a7c      	ldr	r2, [pc, #496]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8000f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f52:	f7ff fb73 	bl	800063c <HAL_GetTick>
 8000f56:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f5a:	f7ff fb6f 	bl	800063c <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e2a7      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f6c:	4b73      	ldr	r3, [pc, #460]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f0      	beq.n	8000f5a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f78:	4b70      	ldr	r3, [pc, #448]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	061b      	lsls	r3, r3, #24
 8000f86:	496d      	ldr	r1, [pc, #436]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	604b      	str	r3, [r1, #4]
 8000f8c:	e018      	b.n	8000fc0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f8e:	4b6b      	ldr	r3, [pc, #428]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a6a      	ldr	r2, [pc, #424]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8000f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fb4f 	bl	800063c <HAL_GetTick>
 8000f9e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa2:	f7ff fb4b 	bl	800063c <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e283      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fb4:	4b61      	ldr	r3, [pc, #388]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f0      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d07f      	beq.n	80010cc <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d05f      	beq.n	8001094 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8000fd4:	4b59      	ldr	r3, [pc, #356]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8000fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fda:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	699a      	ldr	r2, [r3, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	f003 0310 	and.w	r3, r3, #16
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d037      	beq.n	800105a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d006      	beq.n	8001002 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e25c      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d01b      	beq.n	8001044 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 800100c:	4b4b      	ldr	r3, [pc, #300]	; (800113c <HAL_RCC_OscConfig+0x540>)
 800100e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001012:	4a4a      	ldr	r2, [pc, #296]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800101c:	f7ff fb0e 	bl	800063c <HAL_GetTick>
 8001020:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001024:	f7ff fb0a 	bl	800063c <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b11      	cmp	r3, #17
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e242      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001036:	4b41      	ldr	r3, [pc, #260]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8001038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1ef      	bne.n	8001024 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001044:	4b3d      	ldr	r3, [pc, #244]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8001046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800104a:	f023 0210 	bic.w	r2, r3, #16
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	493a      	ldr	r1, [pc, #232]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8001054:	4313      	orrs	r3, r2
 8001056:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800105a:	4b38      	ldr	r3, [pc, #224]	; (800113c <HAL_RCC_OscConfig+0x540>)
 800105c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001060:	4a36      	ldr	r2, [pc, #216]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800106a:	f7ff fae7 	bl	800063c <HAL_GetTick>
 800106e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001072:	f7ff fae3 	bl	800063c <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b11      	cmp	r3, #17
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e21b      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001084:	4b2d      	ldr	r3, [pc, #180]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8001086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0ef      	beq.n	8001072 <HAL_RCC_OscConfig+0x476>
 8001092:	e01b      	b.n	80010cc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001094:	4b29      	ldr	r3, [pc, #164]	; (800113c <HAL_RCC_OscConfig+0x540>)
 8001096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800109a:	4a28      	ldr	r2, [pc, #160]	; (800113c <HAL_RCC_OscConfig+0x540>)
 800109c:	f023 0301 	bic.w	r3, r3, #1
 80010a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a4:	f7ff faca 	bl	800063c <HAL_GetTick>
 80010a8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ac:	f7ff fac6 	bl	800063c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b11      	cmp	r3, #17
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e1fe      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <HAL_RCC_OscConfig+0x540>)
 80010c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1ef      	bne.n	80010ac <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80c1 	beq.w	800125c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_RCC_OscConfig+0x540>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10e      	bne.n	800110a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <HAL_RCC_OscConfig+0x540>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f0:	4a12      	ldr	r2, [pc, #72]	; (800113c <HAL_RCC_OscConfig+0x540>)
 80010f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f6:	6593      	str	r3, [r2, #88]	; 0x58
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_RCC_OscConfig+0x540>)
 80010fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001104:	2301      	movs	r3, #1
 8001106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_RCC_OscConfig+0x544>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001112:	2b00      	cmp	r3, #0
 8001114:	d11c      	bne.n	8001150 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_RCC_OscConfig+0x544>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a09      	ldr	r2, [pc, #36]	; (8001140 <HAL_RCC_OscConfig+0x544>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001122:	f7ff fa8b 	bl	800063c <HAL_GetTick>
 8001126:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001128:	e00c      	b.n	8001144 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800112a:	f7ff fa87 	bl	800063c <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d905      	bls.n	8001144 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e1bf      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
 800113c:	40021000 	.word	0x40021000
 8001140:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001144:	4bb1      	ldr	r3, [pc, #708]	; (800140c <HAL_RCC_OscConfig+0x810>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0ec      	beq.n	800112a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	d02c      	beq.n	80011b6 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800115c:	4bac      	ldr	r3, [pc, #688]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 800115e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116e:	49a8      	ldr	r1, [pc, #672]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 8001170:	4313      	orrs	r3, r2
 8001172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	2b00      	cmp	r3, #0
 8001180:	d010      	beq.n	80011a4 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001182:	4ba3      	ldr	r3, [pc, #652]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 8001184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001188:	4aa1      	ldr	r2, [pc, #644]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001192:	4b9f      	ldr	r3, [pc, #636]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 8001194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001198:	4a9d      	ldr	r2, [pc, #628]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011a2:	e018      	b.n	80011d6 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80011a4:	4b9a      	ldr	r3, [pc, #616]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80011a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011aa:	4a99      	ldr	r2, [pc, #612]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011b4:	e00f      	b.n	80011d6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80011b6:	4b96      	ldr	r3, [pc, #600]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80011b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011bc:	4a94      	ldr	r2, [pc, #592]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80011be:	f023 0301 	bic.w	r3, r3, #1
 80011c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80011c6:	4b92      	ldr	r3, [pc, #584]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80011c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011cc:	4a90      	ldr	r2, [pc, #576]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80011ce:	f023 0304 	bic.w	r3, r3, #4
 80011d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d016      	beq.n	800120c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011de:	f7ff fa2d 	bl	800063c <HAL_GetTick>
 80011e2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011e4:	e00a      	b.n	80011fc <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e6:	f7ff fa29 	bl	800063c <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e15f      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011fc:	4b84      	ldr	r3, [pc, #528]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80011fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0ed      	beq.n	80011e6 <HAL_RCC_OscConfig+0x5ea>
 800120a:	e01d      	b.n	8001248 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120c:	f7ff fa16 	bl	800063c <HAL_GetTick>
 8001210:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001212:	e00a      	b.n	800122a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001214:	f7ff fa12 	bl	800063c <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001222:	4293      	cmp	r3, r2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e148      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800122a:	4b79      	ldr	r3, [pc, #484]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 800122c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1ed      	bne.n	8001214 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001238:	4b75      	ldr	r3, [pc, #468]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 800123a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123e:	4a74      	ldr	r2, [pc, #464]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 8001240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800124c:	2b01      	cmp	r3, #1
 800124e:	d105      	bne.n	800125c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001250:	4b6f      	ldr	r3, [pc, #444]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001254:	4a6e      	ldr	r2, [pc, #440]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 8001256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800125a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0320 	and.w	r3, r3, #32
 8001264:	2b00      	cmp	r3, #0
 8001266:	d03c      	beq.n	80012e2 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126c:	2b00      	cmp	r3, #0
 800126e:	d01c      	beq.n	80012aa <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001270:	4b67      	ldr	r3, [pc, #412]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 8001272:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001276:	4a66      	ldr	r2, [pc, #408]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001280:	f7ff f9dc 	bl	800063c <HAL_GetTick>
 8001284:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001288:	f7ff f9d8 	bl	800063c <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e110      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800129a:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 800129c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0ef      	beq.n	8001288 <HAL_RCC_OscConfig+0x68c>
 80012a8:	e01b      	b.n	80012e2 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012aa:	4b59      	ldr	r3, [pc, #356]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80012ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012b0:	4a57      	ldr	r2, [pc, #348]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ba:	f7ff f9bf 	bl	800063c <HAL_GetTick>
 80012be:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012c2:	f7ff f9bb 	bl	800063c <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e0f3      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012d4:	4b4e      	ldr	r3, [pc, #312]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80012d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1ef      	bne.n	80012c2 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 80e7 	beq.w	80014ba <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	f040 80b7 	bne.w	8001464 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012f6:	4b46      	ldr	r3, [pc, #280]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0203 	and.w	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	429a      	cmp	r2, r3
 8001308:	d124      	bne.n	8001354 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001314:	3b01      	subs	r3, #1
 8001316:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001318:	429a      	cmp	r2, r3
 800131a:	d11b      	bne.n	8001354 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001326:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001328:	429a      	cmp	r2, r3
 800132a:	d113      	bne.n	8001354 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001336:	085b      	lsrs	r3, r3, #1
 8001338:	3b01      	subs	r3, #1
 800133a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800133c:	429a      	cmp	r2, r3
 800133e:	d109      	bne.n	8001354 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	3b01      	subs	r3, #1
 800134e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001350:	429a      	cmp	r2, r3
 8001352:	d061      	beq.n	8001418 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	2b0c      	cmp	r3, #12
 8001358:	d056      	beq.n	8001408 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800135a:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a2c      	ldr	r2, [pc, #176]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 8001360:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001364:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001366:	f7ff f969 	bl	800063c <HAL_GetTick>
 800136a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff f965 	bl	800063c <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e09d      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_RCC_OscConfig+0x818>)
 8001392:	4013      	ands	r3, r2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800139c:	3a01      	subs	r2, #1
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	4311      	orrs	r1, r2
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013a6:	0212      	lsls	r2, r2, #8
 80013a8:	4311      	orrs	r1, r2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013ae:	0852      	lsrs	r2, r2, #1
 80013b0:	3a01      	subs	r2, #1
 80013b2:	0552      	lsls	r2, r2, #21
 80013b4:	4311      	orrs	r1, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013ba:	0852      	lsrs	r2, r2, #1
 80013bc:	3a01      	subs	r2, #1
 80013be:	0652      	lsls	r2, r2, #25
 80013c0:	430a      	orrs	r2, r1
 80013c2:	4913      	ldr	r1, [pc, #76]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a10      	ldr	r2, [pc, #64]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80013ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80013da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013e0:	f7ff f92c 	bl	800063c <HAL_GetTick>
 80013e4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff f928 	bl	800063c <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e060      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_RCC_OscConfig+0x814>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001406:	e058      	b.n	80014ba <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e057      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
 800140c:	40007000 	.word	0x40007000
 8001410:	40021000 	.word	0x40021000
 8001414:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <HAL_RCC_OscConfig+0x8c8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d14a      	bne.n	80014ba <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <HAL_RCC_OscConfig+0x8c8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a26      	ldr	r2, [pc, #152]	; (80014c4 <HAL_RCC_OscConfig+0x8c8>)
 800142a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800142e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_RCC_OscConfig+0x8c8>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4a23      	ldr	r2, [pc, #140]	; (80014c4 <HAL_RCC_OscConfig+0x8c8>)
 8001436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800143a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800143c:	f7ff f8fe 	bl	800063c <HAL_GetTick>
 8001440:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001444:	f7ff f8fa 	bl	800063c <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e032      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_RCC_OscConfig+0x8c8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x848>
 8001462:	e02a      	b.n	80014ba <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	2b0c      	cmp	r3, #12
 8001468:	d025      	beq.n	80014b6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <HAL_RCC_OscConfig+0x8c8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <HAL_RCC_OscConfig+0x8c8>)
 8001470:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001474:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HAL_RCC_OscConfig+0x8c8>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <HAL_RCC_OscConfig+0x8c8>)
 800147c:	f023 0303 	bic.w	r3, r3, #3
 8001480:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_RCC_OscConfig+0x8c8>)
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <HAL_RCC_OscConfig+0x8c8>)
 8001488:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800148c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148e:	f7ff f8d5 	bl	800063c <HAL_GetTick>
 8001492:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001496:	f7ff f8d1 	bl	800063c <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e009      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_RCC_OscConfig+0x8c8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f0      	bne.n	8001496 <HAL_RCC_OscConfig+0x89a>
 80014b4:	e001      	b.n	80014ba <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3728      	adds	r7, #40	; 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0c8      	b.n	800166e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014dc:	4b66      	ldr	r3, [pc, #408]	; (8001678 <HAL_RCC_ClockConfig+0x1b0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d910      	bls.n	800150c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ea:	4b63      	ldr	r3, [pc, #396]	; (8001678 <HAL_RCC_ClockConfig+0x1b0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 0207 	bic.w	r2, r3, #7
 80014f2:	4961      	ldr	r1, [pc, #388]	; (8001678 <HAL_RCC_ClockConfig+0x1b0>)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <HAL_RCC_ClockConfig+0x1b0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d001      	beq.n	800150c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0b0      	b.n	800166e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d04c      	beq.n	80015b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b03      	cmp	r3, #3
 800151e:	d107      	bne.n	8001530 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001520:	4b56      	ldr	r3, [pc, #344]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d121      	bne.n	8001570 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e09e      	b.n	800166e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d107      	bne.n	8001548 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001538:	4b50      	ldr	r3, [pc, #320]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d115      	bne.n	8001570 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e092      	b.n	800166e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d107      	bne.n	8001560 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001550:	4b4a      	ldr	r3, [pc, #296]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d109      	bne.n	8001570 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e086      	b.n	800166e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001560:	4b46      	ldr	r3, [pc, #280]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e07e      	b.n	800166e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001570:	4b42      	ldr	r3, [pc, #264]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 0203 	bic.w	r2, r3, #3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	493f      	ldr	r1, [pc, #252]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001582:	f7ff f85b 	bl	800063c <HAL_GetTick>
 8001586:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001588:	e00a      	b.n	80015a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158a:	f7ff f857 	bl	800063c <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	f241 3288 	movw	r2, #5000	; 0x1388
 8001598:	4293      	cmp	r3, r2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e066      	b.n	800166e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a0:	4b36      	ldr	r3, [pc, #216]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 020c 	and.w	r2, r3, #12
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d1eb      	bne.n	800158a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d008      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015be:	4b2f      	ldr	r3, [pc, #188]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	492c      	ldr	r1, [pc, #176]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015d0:	4b29      	ldr	r3, [pc, #164]	; (8001678 <HAL_RCC_ClockConfig+0x1b0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d210      	bcs.n	8001600 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015de:	4b26      	ldr	r3, [pc, #152]	; (8001678 <HAL_RCC_ClockConfig+0x1b0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 0207 	bic.w	r2, r3, #7
 80015e6:	4924      	ldr	r1, [pc, #144]	; (8001678 <HAL_RCC_ClockConfig+0x1b0>)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_RCC_ClockConfig+0x1b0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e036      	b.n	800166e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d008      	beq.n	800161e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	4918      	ldr	r1, [pc, #96]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4910      	ldr	r1, [pc, #64]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 800163a:	4313      	orrs	r3, r2
 800163c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800163e:	f000 f825 	bl	800168c <HAL_RCC_GetSysClockFreq>
 8001642:	4601      	mov	r1, r0
 8001644:	4b0d      	ldr	r3, [pc, #52]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 8001650:	5cd3      	ldrb	r3, [r2, r3]
 8001652:	f003 031f 	and.w	r3, r3, #31
 8001656:	fa21 f303 	lsr.w	r3, r1, r3
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_RCC_ClockConfig+0x1c0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff9a 	bl	800059c <HAL_InitTick>
 8001668:	4603      	mov	r3, r0
 800166a:	72fb      	strb	r3, [r7, #11]

  return status;
 800166c:	7afb      	ldrb	r3, [r7, #11]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40022000 	.word	0x40022000
 800167c:	40021000 	.word	0x40021000
 8001680:	08001a18 	.word	0x08001a18
 8001684:	20000000 	.word	0x20000000
 8001688:	20000004 	.word	0x20000004

0800168c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <HAL_RCC_GetSysClockFreq+0x104>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016a4:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <HAL_RCC_GetSysClockFreq+0x104>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_GetSysClockFreq+0x34>
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	2b0c      	cmp	r3, #12
 80016b8:	d121      	bne.n	80016fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d11e      	bne.n	80016fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016c0:	4b33      	ldr	r3, [pc, #204]	; (8001790 <HAL_RCC_GetSysClockFreq+0x104>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016cc:	4b30      	ldr	r3, [pc, #192]	; (8001790 <HAL_RCC_GetSysClockFreq+0x104>)
 80016ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	e005      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016dc:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <HAL_RCC_GetSysClockFreq+0x104>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016e8:	4a2a      	ldr	r2, [pc, #168]	; (8001794 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10d      	bne.n	8001714 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	2b04      	cmp	r3, #4
 8001702:	d102      	bne.n	800170a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001704:	4b24      	ldr	r3, [pc, #144]	; (8001798 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001706:	61bb      	str	r3, [r7, #24]
 8001708:	e004      	b.n	8001714 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	2b08      	cmp	r3, #8
 800170e:	d101      	bne.n	8001714 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001710:	4b22      	ldr	r3, [pc, #136]	; (800179c <HAL_RCC_GetSysClockFreq+0x110>)
 8001712:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	2b0c      	cmp	r3, #12
 8001718:	d133      	bne.n	8001782 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800171a:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_RCC_GetSysClockFreq+0x104>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d002      	beq.n	8001730 <HAL_RCC_GetSysClockFreq+0xa4>
 800172a:	2b03      	cmp	r3, #3
 800172c:	d003      	beq.n	8001736 <HAL_RCC_GetSysClockFreq+0xaa>
 800172e:	e005      	b.n	800173c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001732:	617b      	str	r3, [r7, #20]
      break;
 8001734:	e005      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_RCC_GetSysClockFreq+0x110>)
 8001738:	617b      	str	r3, [r7, #20]
      break;
 800173a:	e002      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	617b      	str	r3, [r7, #20]
      break;
 8001740:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <HAL_RCC_GetSysClockFreq+0x104>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	3301      	adds	r3, #1
 800174e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_RCC_GetSysClockFreq+0x104>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	fb02 f203 	mul.w	r2, r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_RCC_GetSysClockFreq+0x104>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	0e5b      	lsrs	r3, r3, #25
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	3301      	adds	r3, #1
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001780:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001782:	69bb      	ldr	r3, [r7, #24]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3724      	adds	r7, #36	; 0x24
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	40021000 	.word	0x40021000
 8001794:	08001a28 	.word	0x08001a28
 8001798:	00f42400 	.word	0x00f42400
 800179c:	016e3600 	.word	0x016e3600

080017a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017b8:	f7ff f9bc 	bl	8000b34 <HAL_PWREx_GetVoltageRange>
 80017bc:	6178      	str	r0, [r7, #20]
 80017be:	e014      	b.n	80017ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c4:	4a24      	ldr	r2, [pc, #144]	; (8001858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ca:	6593      	str	r3, [r2, #88]	; 0x58
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017d8:	f7ff f9ac 	bl	8000b34 <HAL_PWREx_GetVoltageRange>
 80017dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017f0:	d10b      	bne.n	800180a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b80      	cmp	r3, #128	; 0x80
 80017f6:	d919      	bls.n	800182c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2ba0      	cmp	r3, #160	; 0xa0
 80017fc:	d902      	bls.n	8001804 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017fe:	2302      	movs	r3, #2
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	e013      	b.n	800182c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001804:	2301      	movs	r3, #1
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	e010      	b.n	800182c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b80      	cmp	r3, #128	; 0x80
 800180e:	d902      	bls.n	8001816 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001810:	2303      	movs	r3, #3
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	e00a      	b.n	800182c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b80      	cmp	r3, #128	; 0x80
 800181a:	d102      	bne.n	8001822 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800181c:	2302      	movs	r3, #2
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	e004      	b.n	800182c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b70      	cmp	r3, #112	; 0x70
 8001826:	d101      	bne.n	800182c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001828:	2301      	movs	r3, #1
 800182a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 0207 	bic.w	r2, r3, #7
 8001834:	4909      	ldr	r1, [pc, #36]	; (800185c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	429a      	cmp	r2, r3
 8001848:	d001      	beq.n	800184e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021000 	.word	0x40021000
 800185c:	40022000 	.word	0x40022000

08001860 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e095      	b.n	800199e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	2b00      	cmp	r3, #0
 8001878:	d108      	bne.n	800188c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001882:	d009      	beq.n	8001898 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
 800188a:	e005      	b.n	8001898 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d106      	bne.n	80018b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7fe fd8a 	bl	80003cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2202      	movs	r2, #2
 80018bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80018d8:	d902      	bls.n	80018e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e002      	b.n	80018e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80018e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80018ee:	d007      	beq.n	8001900 <HAL_SPI_Init+0xa0>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80018f8:	d002      	beq.n	8001900 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001942:	ea42 0103 	orr.w	r1, r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	0c1b      	lsrs	r3, r3, #16
 800195c:	f003 0204 	and.w	r2, r3, #4
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800197c:	ea42 0103 	orr.w	r1, r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <__libc_init_array>:
 80019a8:	b570      	push	{r4, r5, r6, lr}
 80019aa:	4e0d      	ldr	r6, [pc, #52]	; (80019e0 <__libc_init_array+0x38>)
 80019ac:	4c0d      	ldr	r4, [pc, #52]	; (80019e4 <__libc_init_array+0x3c>)
 80019ae:	1ba4      	subs	r4, r4, r6
 80019b0:	10a4      	asrs	r4, r4, #2
 80019b2:	2500      	movs	r5, #0
 80019b4:	42a5      	cmp	r5, r4
 80019b6:	d109      	bne.n	80019cc <__libc_init_array+0x24>
 80019b8:	4e0b      	ldr	r6, [pc, #44]	; (80019e8 <__libc_init_array+0x40>)
 80019ba:	4c0c      	ldr	r4, [pc, #48]	; (80019ec <__libc_init_array+0x44>)
 80019bc:	f000 f820 	bl	8001a00 <_init>
 80019c0:	1ba4      	subs	r4, r4, r6
 80019c2:	10a4      	asrs	r4, r4, #2
 80019c4:	2500      	movs	r5, #0
 80019c6:	42a5      	cmp	r5, r4
 80019c8:	d105      	bne.n	80019d6 <__libc_init_array+0x2e>
 80019ca:	bd70      	pop	{r4, r5, r6, pc}
 80019cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019d0:	4798      	blx	r3
 80019d2:	3501      	adds	r5, #1
 80019d4:	e7ee      	b.n	80019b4 <__libc_init_array+0xc>
 80019d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019da:	4798      	blx	r3
 80019dc:	3501      	adds	r5, #1
 80019de:	e7f2      	b.n	80019c6 <__libc_init_array+0x1e>
 80019e0:	08001a58 	.word	0x08001a58
 80019e4:	08001a58 	.word	0x08001a58
 80019e8:	08001a58 	.word	0x08001a58
 80019ec:	08001a5c 	.word	0x08001a5c

080019f0 <memset>:
 80019f0:	4402      	add	r2, r0
 80019f2:	4603      	mov	r3, r0
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d100      	bne.n	80019fa <memset+0xa>
 80019f8:	4770      	bx	lr
 80019fa:	f803 1b01 	strb.w	r1, [r3], #1
 80019fe:	e7f9      	b.n	80019f4 <memset+0x4>

08001a00 <_init>:
 8001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a02:	bf00      	nop
 8001a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a06:	bc08      	pop	{r3}
 8001a08:	469e      	mov	lr, r3
 8001a0a:	4770      	bx	lr

08001a0c <_fini>:
 8001a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0e:	bf00      	nop
 8001a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a12:	bc08      	pop	{r3}
 8001a14:	469e      	mov	lr, r3
 8001a16:	4770      	bx	lr
